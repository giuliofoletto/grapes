name: Release â€” build, create GitHub Release, publish to PyPI

on:
  push:
    tags:
      - '*'

# Ensure the workflow can create releases
permissions:
  contents: write

jobs:
  build-and-testpypi:
    name: Build and upload to TestPyPI
    runs-on: ubuntu-latest
    outputs:
      dist-artifact-path: ${{ steps.upload.outputs.artifact-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build sdist and wheel
        run: python -m build --sdist --wheel

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        # Upload all files in dist/ to the GitHub release using the upload_url
        run: |
          set -e
          upload_url="${{ steps.create_release.outputs.upload_url }}"
          echo "upload_url=$upload_url"
          for f in dist/*; do
            [ -f "$f" ] || continue
            filename=$(basename "$f")
            echo "Uploading $filename"
            curl -sS -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$f" "$upload_url?name=$filename"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        id: upload
        with:
          name: dist-files
          path: dist

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.6.0
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    name: Publish to PyPI (manual approval required)
    runs-on: ubuntu-latest
    needs: build-and-testpypi
    environment:
      name: publish-to-pypi
      # Requires an environment with protection rules and reviewers set in repo settings
      url: https://pypi.org/project/grapes/
    steps:
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install twine
        run: python -m pip install --upgrade pip && pip install twine

      - name: Publish to PyPI
        if: ${{ github.event_name == 'push' }}
        uses: pypa/gh-action-pypi-publish@v1.6.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
